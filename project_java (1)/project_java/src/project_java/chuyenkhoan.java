/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project_java;

import db.Access;
import db.DBConnect;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Tran Quoc
 */
public class chuyenkhoan extends javax.swing.JFrame {

    /**
     * Creates new form chuyenkhoan
     */
    public String stk = "";

    public chuyenkhoan() {
        initComponents();
        setLocationRelativeTo(null);
        this.setSize(630, 500);
        btnHuyGD.setIcon(new ImageIcon("src/images/quaylai.png"));
        btnThucHien.setIcon(new ImageIcon("src/images/thuchien.png"));
        lblhinhanh.setIcon(new ImageIcon("src/images/banner.png"));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtsotaikhoannhan = new javax.swing.JTextField();
        txtsotienchuyen = new javax.swing.JTextField();
        btnThucHien = new javax.swing.JButton();
        btnHuyGD = new javax.swing.JButton();
        lblhinhanh = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtSotaikhoan = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtsotaikhoannhan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtsotaikhoannhanActionPerformed(evt);
            }
        });

        btnThucHien.setText("Thực Hiện");
        btnThucHien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThucHienActionPerformed(evt);
            }
        });

        btnHuyGD.setText("Hủy Giao Dịch");
        btnHuyGD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuyGDActionPerformed(evt);
            }
        });

        jLabel1.setText("Số Tài Khoản Nhận");

        jLabel2.setText("Số Tiền");

        jLabel3.setText("Tài Khoản Gửi");

        txtSotaikhoan.setEditable(false);
        txtSotaikhoan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSotaikhoanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnThucHien)
                        .addGap(37, 37, 37)
                        .addComponent(btnHuyGD))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtsotienchuyen, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                            .addComponent(txtsotaikhoannhan, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                            .addComponent(txtSotaikhoan))))
                .addContainerGap(257, Short.MAX_VALUE))
            .addComponent(lblhinhanh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(lblhinhanh, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtSotaikhoan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtsotaikhoannhan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtsotienchuyen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnThucHien)
                    .addComponent(btnHuyGD))
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnThucHienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThucHienActionPerformed

        Calendar cl = Calendar.getInstance();
        SimpleDateFormat s = new SimpleDateFormat("dd/MM/yyyy");
        Date day = null;
        String stk = txtSotaikhoan.getText();
        String tknhan = txtsotaikhoannhan.getText();
        String sotienchuyen = txtsotienchuyen.getText();
        String loi = "";
        if (tknhan.length() == 0) {
            loi += "\nBạn Phải Nhập Tài Khoản Nhận Tiền";
        }
        if (sotienchuyen.length() == 0) {
            loi += "\nBạn Phải Nhập Số Tiền Gửi";
        }
        if (loi.length() == 0) {
            if (stk.equals(tknhan)) {
                JOptionPane.showMessageDialog(this, "Không được chuyển sang chính số tài khoản đó");
            } else {
                float tongtien = 0;
                float sotiennhan = 0;
                int sotiengui = Integer.parseInt(txtsotienchuyen.getText());

//            if (!untity.checkTien(txtsotienchuyen.getText())) {
//                 JOptionPane.showMessageDialog(null, "ss","THÔNG BÁO",JOptionPane.ERROR_MESSAGE);
//            }
                if (sotiengui < 100000) {
                    JOptionPane.showMessageDialog(null, "Số tiền chuyển phải lớn hơn 100.000 VNĐ", "Thông Báo", JOptionPane.ERROR_MESSAGE);
                } else if (sotiengui > 5000001) {
                    JOptionPane.showMessageDialog(null, "Chuyển tối đa 5.000.000 VNĐ", "Thông Báo", JOptionPane.ERROR_MESSAGE);
                } else if (sotiengui % 50000 != 0) {
                    JOptionPane.showMessageDialog(null, "Số Tiền Chuyển Không Hợp Lệ", "Thông Báo", JOptionPane.ERROR_MESSAGE);
                } else {
                    Connection con;
                    CallableStatement cstmt = null;
                    ResultSet rs = null;
                    con = DBConnect.opConnection();
                    try {
                        cstmt = con.prepareCall("SELECT * FROM Customer WHERE Sotaikhoan ='" + tknhan + "'");
//                    cstmt.setString(1, stk);
                        rs = cstmt.executeQuery();
                        if (rs.next()) {
                            cstmt = con.prepareCall("SELECT * FROM Customer WHERE Sotaikhoan ='" + stk + "'");
//                        cstmt.setString(1, stk);
                            rs = cstmt.executeQuery();
                            if (rs.next()) {
                                tongtien = rs.getFloat("Money");
                                tongtien = tongtien - sotiengui;
                            }
                            if (tongtien >= 50000) {
                                con.setAutoCommit(false);
                                cstmt = con.prepareCall("UPDATE Customer SET Money ='" + tongtien + "' WHERE Sotaikhoan = '" + stk + "' ");
                                int i = cstmt.executeUpdate();
                                if (i > 0) {
                                    cstmt = con.prepareCall("SELECT * FROM Customer WHERE Sotaikhoan ='" + tknhan + "'");
//                                cstmt.setString(1, tknhan);
                                    rs = cstmt.executeQuery();
                                    if (rs.next()) {
                                        sotiennhan = rs.getFloat("Money");
                                        sotiennhan = sotiennhan + sotiengui;
                                        cstmt = con.prepareCall("UPDATE Customer SET Money ='" + sotiennhan + "' WHERE Sotaikhoan = '" + tknhan + "' ");
                                        int j = cstmt.executeUpdate();
                                        if (j > 0) {
                                            JOptionPane.showMessageDialog(null, "Chuyển Tiền Thành Công");
                                            cstmt = con.prepareCall("{call insertHistory (?,?,?,?)}");
                                            cstmt.setInt(1, 9);
                                            cstmt.setString(2, stk);
                                            cstmt.setDate(3, (java.sql.Date) day);
                                            cstmt.setFloat(4, -sotiengui);
                                            int k = cstmt.executeUpdate();
                                            if (k > 0) {
                                                cstmt = con.prepareCall("{call insertHistory(?,?,?,?)}");
                                                cstmt.setInt(1, 10);
                                                cstmt.setString(2, tknhan);
                                                cstmt.setDate(3, (java.sql.Date) day);
                                                cstmt.setFloat(4, +sotiengui);
                                                int m = cstmt.executeUpdate();
                                                if (m > 0) {
                                                    JOptionPane.showMessageDialog(this, "Thêm Vào Biên Lai Thành Công");
                                                    JOptionPane.showMessageDialog(null, "Cảm ơn bạn");
                                                    this.clear();
                                                    
                                                    
//                                                    if (JOptionPane.showConfirmDialog(null, "Chuyển Khoản Thành Công Bạn Có Muốn Thực Hiện Giao Dịch Khác Không", "", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
//                                                        giaodien gd = new giaodien();
//                                                        gd.loadName(stk);
//                                                        Access.CanleAcess(gd, this);
//                                                    }else{
//                                                        JOptionPane.showMessageDialog(null, "Cảm Ơn Bạn Đã Sử Dụng Dịch Vụ Của Chúng Tôi");
//                                                        nhapSTK stkk = new nhapSTK();
//                                                        Access.CanleAcess(stkk, this);
//                                                    }
                                                }

                                                }
                                                con.commit();
                                            } else {
                                                JOptionPane.showMessageDialog(null, "Chuyển Tiền Thất BẠI");
                                                con.rollback();
                                            }
                                        }
                                    }
                                    con.setAutoCommit(true);
                                } else {
                                    JOptionPane.showMessageDialog(null, "Số Tiền Trong Tài Khoản Không Đủ");
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Số Tài Khoản Không Tồn Tại");
                            }
                        }catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "Lỗi");

                    }finally {
                        DBConnect.closeAll(con, cstmt, rs);
                    }
                    }
                }
            }else {
            JOptionPane.showMessageDialog(null, loi);
        }


    }//GEN-LAST:event_btnThucHienActionPerformed

    private void btnHuyGDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHuyGDActionPerformed
        this.Cancle();

    }//GEN-LAST:event_btnHuyGDActionPerformed

    private void txtSotaikhoanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSotaikhoanActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSotaikhoanActionPerformed

    private void txtsotaikhoannhanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtsotaikhoannhanActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtsotaikhoannhanActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chuyenkhoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chuyenkhoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chuyenkhoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chuyenkhoan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chuyenkhoan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHuyGD;
    private javax.swing.JButton btnThucHien;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblhinhanh;
    private javax.swing.JTextField txtSotaikhoan;
    private javax.swing.JTextField txtsotaikhoannhan;
    private javax.swing.JTextField txtsotienchuyen;
    // End of variables declaration//GEN-END:variables

    private void Cancle() {
        stk = txtSotaikhoan.getText();
        Connection con = null;
        ResultSet rs = null;
        CallableStatement cstmt = null;
        con = DBConnect.opConnection();
        try {
            cstmt = con.prepareCall("{call getCustomerId (?)}");
            cstmt.setString(1, stk);
            rs = cstmt.executeQuery();
            if (rs.next()) {
                giaodien gd = new giaodien();
                gd.loadName(stk);
                Access.CanleAcess(gd, this);

            }
            //
            //
            //
            //
        } catch (SQLException ex) {
            Logger.getLogger(giaodien.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void loadck(String stk) {
        Connection con = null;
        ResultSet rs = null;
        CallableStatement cstmt = null;
        con = DBConnect.opConnection();
        try {
            cstmt = con.prepareCall("{call getCustomerId(?)}");
            cstmt.setString(1, stk);
            rs = cstmt.executeQuery();
            while (rs.next()) {
                cstmt = con.prepareCall("{call getCustomer}");
                txtSotaikhoan.setText(stk);

            }
        } catch (SQLException ex) {
            Logger.getLogger(dangnhapATM.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            DBConnect.closeAll(con, cstmt, rs);
        }
    }

    private void clear() {
        txtsotaikhoannhan.setText("");
        txtsotienchuyen.setText("");
    }
}
