/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package project_java;

import db.Access;
import db.DBConnect;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Tran Quoc
 */
public class ruttien extends javax.swing.JFrame {

    /**
     * Creates new form ruttien
     */
    public String stk = "";

    public ruttien() {
        initComponents();
        setLocationRelativeTo(null);
        this.setSize(630, 500);
        lblhinhanh.setIcon(new ImageIcon("src/images/banner.png"));
        btn100k.setIcon(new ImageIcon("src/images/tru.png"));
        btn200k.setIcon(new ImageIcon("src/images/tru.png"));
        btn500k.setIcon(new ImageIcon("src/images/tru.png"));
        btn1Cu.setIcon(new ImageIcon("src/images/tru.png"));
        btnSoKhac.setIcon(new ImageIcon("src/images/kiemtra.png"));
        btnHuyGD.setIcon(new ImageIcon("src/images/exit.png"));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn500k = new javax.swing.JButton();
        btn1Cu = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblhinhanh = new javax.swing.JLabel();
        btn100k = new javax.swing.JButton();
        btn200k = new javax.swing.JButton();
        btnSoKhac = new javax.swing.JButton();
        btnHuyGD = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        txtSTK = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn500k.setText("500.000VND");
        btn500k.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn500kActionPerformed(evt);
            }
        });

        btn1Cu.setText("2.000.000VND");
        btn1Cu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn1CuActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 0, 255));
        jLabel1.setText("Quý Khách Vui Lòng Chọn Số Tiền Rút");

        btn100k.setText("100.000VND");
        btn100k.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn100kActionPerformed(evt);
            }
        });

        btn200k.setText("200.000VND");
        btn200k.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn200kActionPerformed(evt);
            }
        });

        btnSoKhac.setText("Số khác");
        btnSoKhac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSoKhacActionPerformed(evt);
            }
        });

        btnHuyGD.setText("Hủy Giao Dịch");
        btnHuyGD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuyGDActionPerformed(evt);
            }
        });

        jLabel2.setText("Số TK:");

        txtSTK.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblhinhanh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btn100k, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn500k, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btn200k, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn1Cu, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSoKhac, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHuyGD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(81, 81, 81))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(152, 152, 152)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSTK, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(lblhinhanh, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSTK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn100k, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn1Cu, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSoKhac, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnHuyGD, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn200k, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn500k, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn500kActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn500kActionPerformed
        stk = txtSTK.getText();
        Date day = null;
        float sotienrut = 500000;
        float tongtien = 0;
        Connection con = null;
        ResultSet rs = null;
        CallableStatement cstmt = null;
        con = DBConnect.opConnection();
        try {
            cstmt = con.prepareCall("{call getCustomerId(?)}");
            cstmt.setString(1, stk);
            rs = cstmt.executeQuery();
            while (rs.next()) {
                cstmt = con.prepareCall("{call getCustomer}");
                tongtien = rs.getFloat("Money");
                tongtien = tongtien - sotienrut;
                if (tongtien >= 50000) {
                    cstmt = con.prepareCall("{call updateMoney(?,?)}");
                    cstmt.setString(1, txtSTK.getText());
                    cstmt.setFloat(2, tongtien);
                    int i = cstmt.executeUpdate();
                    if (i > 0) {
                        JOptionPane.showMessageDialog(null, "Rút iền thành công");
                        //  tien hanh lap bien lai
                        cstmt = con.prepareCall("{call insertHistory (?,?,?,?)}");
                        cstmt.setInt(1, 3);
                        cstmt.setString(2, stk);
                        cstmt.setDate(3, day);
                        cstmt.setFloat(4, sotienrut);
                        int k = cstmt.executeUpdate();
                        if (k > 0) {
                            if (JOptionPane.showConfirmDialog(null, "Bạn muốn nhận biên lai", "", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
                                cstmt = con.prepareCall("{call getHistory}");
                                rs = cstmt.executeQuery();
                                while (rs.next()) {
                                    Object[] dt = {
                                        rs.getString("Sotaikhoan"),
                                        rs.getString("Id"),
                                        rs.getString("MaId"),
                                        rs.getString("Reason"),
                                        rs.getString("Sotien"),
                                        rs.getString("Date"),
                                        rs.getString("Content"),};
                                    ObjectOutputStream ghi = null;
                                    try {
                                        ghi = new ObjectOutputStream(new FileOutputStream("src/data/bienlai.txt"));
                                        ghi.writeObject(dt);
                                    } catch (IOException ex) {
                                        Logger.getLogger(ruttien.class.getName()).log(Level.SEVERE, null, ex);
                                    } finally {
                                        try {
                                            ghi.close();
                                        } catch (IOException ex) {
                                            Logger.getLogger(ruttien.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }

                                }
                            } else {
                            }

                            giaodien gd = new giaodien();
                            gd.loadName(stk);
                            Access.CanleAcess(gd, this);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "SỐ tiền trong tài khoản không đủ!!!!");
                }

            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Rút tiền không thành công!!!", "LOI", JOptionPane.ERROR_MESSAGE);
        } finally {
            DBConnect.closeAll(con, cstmt, rs);
        }
    }//GEN-LAST:event_btn500kActionPerformed

    private void btn1CuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn1CuActionPerformed
        stk = txtSTK.getText();
        Date day = null;
        float sotienrut = 2000000;
        float tongtien = 0;
        Connection con = null;
        ResultSet rs = null;
        CallableStatement cstmt = null;
        con = DBConnect.opConnection();
        try {
            cstmt = con.prepareCall("{call getCustomerId(?)}");
            cstmt.setString(1, stk);
            rs = cstmt.executeQuery();
            while (rs.next()) {
                cstmt = con.prepareCall("{call getCustomer}");
                tongtien = rs.getFloat("Money");
                tongtien = tongtien - sotienrut;
                if (tongtien >= 50000) {
                    cstmt = con.prepareCall("{call updateMoney(?,?)}");
                    cstmt.setString(1, txtSTK.getText());
                    cstmt.setFloat(2, tongtien);
                    int i = cstmt.executeUpdate();
                    if (i > 0) {
                        JOptionPane.showMessageDialog(null, "Rút iền thành công");
                        //  tien hanh lap bien lai
                        cstmt = con.prepareCall("{call insertHistory (?,?,?,?)}");
                        cstmt.setInt(1, 3);
                        cstmt.setString(2, stk);
                        cstmt.setDate(3, day);
                        cstmt.setFloat(4, sotienrut);
                        int k = cstmt.executeUpdate();
                        if (k > 0) {
                            if (JOptionPane.showConfirmDialog(null, "Bạn muốn nhận biên lai", "", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
                                cstmt = con.prepareCall("{call getHistory}");
                                rs = cstmt.executeQuery();
                                while (rs.next()) {
                                    Object[] dt = {
                                        rs.getString("Sotaikhoan"),
                                        rs.getString("Id"),
                                        rs.getString("MaId"),
                                        rs.getString("Reason"),
                                        rs.getString("Sotien"),
                                        rs.getString("Date"),
                                        rs.getString("Content"),};
                                    ObjectOutputStream ghi = null;
                                    try {
                                        ghi = new ObjectOutputStream(new FileOutputStream("src/data/bienlai.txt"));
                                        ghi.writeObject(dt);
                                    } catch (IOException ex) {
                                        Logger.getLogger(ruttien.class.getName()).log(Level.SEVERE, null, ex);
                                    } finally {
                                        try {
                                            ghi.close();
                                        } catch (IOException ex) {
                                            Logger.getLogger(ruttien.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }

                                }
                            } else {
                            }

                            giaodien gd = new giaodien();
                            gd.loadName(stk);
                            Access.CanleAcess(gd, this);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "SỐ tiền trong tài khoản không đủ!!!!");
                }

            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Rút tiền không thành công!!!", "LOI", JOptionPane.ERROR_MESSAGE);
        } finally {
            DBConnect.closeAll(con, cstmt, rs);
        }
    }//GEN-LAST:event_btn1CuActionPerformed

    private void btn100kActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn100kActionPerformed
        stk = txtSTK.getText();
        Date day = null;
        float sotienrut = 100000;
        float tongtien = 0;
        Connection con = null;
        ResultSet rs = null;
        CallableStatement cstmt = null;
        con = DBConnect.opConnection();
        try {
            cstmt = con.prepareCall("{call getCustomerId(?)}");
            cstmt.setString(1, stk);
            rs = cstmt.executeQuery();
            while (rs.next()) {
                cstmt = con.prepareCall("{call getCustomer}");
                tongtien = rs.getFloat("Money");
                tongtien = tongtien - sotienrut;
                if (tongtien >= 50000) {
                    cstmt = con.prepareCall("{call updateMoney(?,?)}");
                    cstmt.setString(1, txtSTK.getText());
                    cstmt.setFloat(2, tongtien);
                    int i = cstmt.executeUpdate();
                    if (i > 0) {
                        JOptionPane.showMessageDialog(null, "Rút iền thành công");
                        //  tien hanh lap bien lai
                        cstmt = con.prepareCall("{call insertHistory (?,?,?,?)}");
                        cstmt.setInt(1, 3);
                        cstmt.setString(2, stk);
                        cstmt.setDate(3, day);
                        cstmt.setFloat(4, sotienrut);
                        int k = cstmt.executeUpdate();
                        if (k > 0) {
                            if (JOptionPane.showConfirmDialog(null, "Bạn muốn nhận biên lai", "", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
                                cstmt = con.prepareCall("{call getHistory}");
                                rs = cstmt.executeQuery();
                                while (rs.next()) {
                                    Object[] dt = {
                                        rs.getString("Sotaikhoan"),
                                        rs.getString("Id"),
                                        rs.getString("MaId"),
                                        rs.getString("Reason"),
                                        rs.getString("Sotien"),
                                        rs.getString("Date"),
                                        rs.getString("Content"),};
                                    ObjectOutputStream ghi = null;
                                    try {
                                        ghi = new ObjectOutputStream(new FileOutputStream("src/data/bienlai.txt"));
                                        ghi.writeObject(dt);
                                    } catch (IOException ex) {
                                        Logger.getLogger(ruttien.class.getName()).log(Level.SEVERE, null, ex);
                                    } finally {
                                        try {
                                            ghi.close();
                                        } catch (IOException ex) {
                                            Logger.getLogger(ruttien.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }

                                }
                            } else {
                            }

                            giaodien gd = new giaodien();
                            gd.loadName(stk);
                            Access.CanleAcess(gd, this);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "SỐ tiền trong tài khoản không đủ!!!!");
                }

            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Rút tiền không thành công!!!", "LOI", JOptionPane.ERROR_MESSAGE);
        } finally {
            DBConnect.closeAll(con, cstmt, rs);
        }

    }//GEN-LAST:event_btn100kActionPerformed

    private void btn200kActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn200kActionPerformed
        // TODO add your handling code here:
        stk = txtSTK.getText();
        Date day = null;
        float sotienrut = 200000;
        float tongtien = 0;
        Connection con = null;
        ResultSet rs = null;
        CallableStatement cstmt = null;
        con = DBConnect.opConnection();
        try {
            cstmt = con.prepareCall("{call getCustomerId(?)}");
            cstmt.setString(1, stk);
            rs = cstmt.executeQuery();
            while (rs.next()) {
                cstmt = con.prepareCall("{call getCustomer}");
                tongtien = rs.getFloat("Money");
                tongtien = tongtien - sotienrut;
                if (tongtien >= 50000) {
                    cstmt = con.prepareCall("{call updateMoney(?,?)}");
                    cstmt.setString(1, txtSTK.getText());
                    cstmt.setFloat(2, tongtien);
                    int i = cstmt.executeUpdate();
                    if (i > 0) {
                        JOptionPane.showMessageDialog(null, "Rút iền thành công");
                        //  tien hanh lap bien lai
                        cstmt = con.prepareCall("{call insertHistory (?,?,?,?)}");
                        cstmt.setInt(1, 3);
                        cstmt.setString(2, stk);
                        cstmt.setDate(3, day);
                        cstmt.setFloat(4, sotienrut);
                        int k = cstmt.executeUpdate();
                        if (k > 0) {
                            if (JOptionPane.showConfirmDialog(null, "Bạn muốn nhận biên lai", "", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
                                cstmt = con.prepareCall("{call getHistory}");
                                rs = cstmt.executeQuery();
                                while (rs.next()) {
                                    Object[] dt = {
                                        rs.getString("Sotaikhoan"),
                                        rs.getString("Id"),
                                        rs.getString("MaId"),
                                        rs.getString("Reason"),
                                        rs.getString("Sotien"),
                                        rs.getString("Date"),
                                        rs.getString("Content"),};
                                    ObjectOutputStream ghi = null;
                                    try {
                                        ghi = new ObjectOutputStream(new FileOutputStream("src/data/bienlai.txt"));
                                        ghi.writeObject(dt);
                                    } catch (IOException ex) {
                                        Logger.getLogger(ruttien.class.getName()).log(Level.SEVERE, null, ex);
                                    } finally {
                                        try {
                                            ghi.close();
                                        } catch (IOException ex) {
                                            Logger.getLogger(ruttien.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }

                                }
                            } else {
                            }

                            giaodien gd = new giaodien();
                            gd.loadName(stk);
                            Access.CanleAcess(gd, this);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "SỐ tiền trong tài khoản không đủ!!!!");
                }

            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Rút tiền không thành công!!!", "LOI", JOptionPane.ERROR_MESSAGE);
        } finally {
            DBConnect.closeAll(con, cstmt, rs);
        }
    }//GEN-LAST:event_btn200kActionPerformed

    private void btnSoKhacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSoKhacActionPerformed
        // TODO add your handling code here:
        stk = txtSTK.getText();
        Connection con = null;
        ResultSet rs = null;
        CallableStatement cstmt = null;
        con = DBConnect.opConnection();
        try {
            cstmt = con.prepareCall("{call getCustomerId (?)}");
            cstmt.setString(1, stk);
            rs = cstmt.executeQuery();
            if (rs.next()) {
                frmRutTien2 rt2 = new frmRutTien2();
                rt2.loadrt2(stk);
                Access.CanleAcess(rt2, this);
            }
            //
            //
            //
            //
        } catch (SQLException ex) {
            Logger.getLogger(giaodien.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSoKhacActionPerformed

    private void btnHuyGDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHuyGDActionPerformed
        // TODO add your handling code here:
        stk = txtSTK.getText();
        Connection con = null;
        ResultSet rs = null;
        CallableStatement cstmt = null;
        con = DBConnect.opConnection();
        try {
            cstmt = con.prepareCall("{call getCustomerId (?)}");
            cstmt.setString(1, stk);
            rs = cstmt.executeQuery();
            if (rs.next()) {
                giaodien gdc = new giaodien();
                gdc.loadName(stk);
                Access.CanleAcess(gdc, this);
            }
            //
            //
            //
            //
        } catch (SQLException ex) {
            Logger.getLogger(giaodien.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnHuyGDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ruttien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ruttien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ruttien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ruttien.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ruttien().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn100k;
    private javax.swing.JButton btn1Cu;
    private javax.swing.JButton btn200k;
    private javax.swing.JButton btn500k;
    private javax.swing.JButton btnHuyGD;
    private javax.swing.JButton btnSoKhac;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel lblhinhanh;
    private javax.swing.JTextField txtSTK;
    // End of variables declaration//GEN-END:variables

    private void CanleAcess() {
        giaodien gdc = new giaodien();
        Access.CanleAcess(gdc, this);
    }

    public void loadrt(String stk) {
        Connection con = null;
        ResultSet rs = null;
        CallableStatement cstmt = null;
        con = DBConnect.opConnection();
        try {
            cstmt = con.prepareCall("{call getCustomerId(?)}");
            cstmt.setString(1, stk);
            rs = cstmt.executeQuery();
            while (rs.next()) {
                cstmt = con.prepareCall("{call getCustomer}");
                txtSTK.setText(stk);

            }
        } catch (SQLException ex) {
            Logger.getLogger(dangnhapATM.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            DBConnect.closeAll(con, cstmt, rs);
        }
    }
}
